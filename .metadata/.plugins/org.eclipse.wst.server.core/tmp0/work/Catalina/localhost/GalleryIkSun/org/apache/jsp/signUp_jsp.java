/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-08-12 23:54:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signUp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>회원가입 약관</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<div id=\"wrap\">\r\n");
      out.write("			<h1>회원가입 약관</h1>\r\n");
      out.write("			<form method=\"post\" action=\"register.jsp\" id=\"signupForm\">\r\n");
      out.write("				<h2>제1조 (목적)</h2>\r\n");
      out.write("		        <p>\r\n");
      out.write("		            본 약관은 [사이트 이름] (이하 '회사')가 제공하는 모든 서비스(이하 '서비스')의 회원가입에 관한 조건과 절차, \r\n");
      out.write("		            회사와 회원의 권리와 의무, 책임 사항 및 기타 필요한 사항을 규정함을 목적으로 합니다.\r\n");
      out.write("		        </p>\r\n");
      out.write("		        \r\n");
      out.write("		        <h2>제2조 (회원가입)</h2>\r\n");
      out.write("		        <p>\r\n");
      out.write("		            1. 회원가입은 본 약관에 동의한 후, 회사가 정한 절차에 따라 회원 가입을 신청하고 회사가 이를 승인함으로써 성립됩니다.<br>\r\n");
      out.write("		            2. 회원 가입을 위한 필수 정보는 다음과 같습니다: 아이디, 비밀번호, 이름, 이메일 주소 등.<br>\r\n");
      out.write("		            3. 회사는 회원가입 신청자의 신원 및 정보의 진위를 확인할 수 있으며, 허위 정보 입력 시 회원가입이 거부될 수 있습니다.\r\n");
      out.write("		        </p>\r\n");
      out.write("		        \r\n");
      out.write("		        <h2>제3조 (개인정보 처리방침)</h2>\r\n");
      out.write("		        <p>\r\n");
      out.write("		            1. 회사는 개인정보 보호 관련 법령에 따라 회원의 개인정보를 수집, 이용, 관리합니다.<br>\r\n");
      out.write("		            2. 개인정보의 수집 및 이용 목적, 수집 항목, 보유 및 이용 기간 등 자세한 사항은 개인정보 처리방침에서 확인할 수 있습니다.<br>\r\n");
      out.write("		            3. 회원은 언제든지 개인정보 열람, 수정, 삭제를 요청할 수 있으며, 회사는 이를 즉시 처리합니다.\r\n");
      out.write("		        </p>\r\n");
      out.write("		        \r\n");
      out.write("		        <h2>제4조 (이용자의 의무)</h2>\r\n");
      out.write("		        <p>\r\n");
      out.write("		            1. 회원은 본 약관 및 회사의 정책을 준수해야 합니다.<br>\r\n");
      out.write("		            2. 회원은 타인의 개인정보를 도용하거나 허위 정보를 입력해서는 안 됩니다.<br>\r\n");
      out.write("		            3. 회원은 서비스를 이용함에 있어 법령을 준수하고 사회적 윤리와 도덕에 맞게 행동해야 합니다.\r\n");
      out.write("		        </p>\r\n");
      out.write("		        \r\n");
      out.write("		        <h2>제5조 (서비스 제공의 제한)</h2>\r\n");
      out.write("		        <p>\r\n");
      out.write("		            1. 회사는 다음과 같은 경우 서비스 제공을 제한하거나 중단할 수 있습니다: 시스템 점검, 유지보수, 천재지변 등.<br>\r\n");
      out.write("		            2. 회사는 서비스 제공의 중단으로 인한 손해에 대해 책임을 지지 않습니다.\r\n");
      out.write("		        </p>\r\n");
      out.write("		        \r\n");
      out.write("		        <h2>제6조 (계약 해지 및 종료)</h2>\r\n");
      out.write("		        <p>\r\n");
      out.write("		            1. 회원은 언제든지 서비스 이용을 중단하고 계정을 해지할 수 있습니다.<br>\r\n");
      out.write("		            2. 회사는 회원이 본 약관을 위반한 경우, 즉시 계정을 정지하거나 해지할 수 있습니다.\r\n");
      out.write("		        </p>\r\n");
      out.write("		        \r\n");
      out.write("		        <h2>제7조 (면책 조항)</h2>\r\n");
      out.write("		        <p>\r\n");
      out.write("		            1. 회사는 서비스 이용과 관련하여 발생하는 회원의 손해에 대해 책임을 지지 않습니다.<br>\r\n");
      out.write("		            2. 회사는 서비스의 중단, 오류 등으로 인한 손해에 대해 책임을 지지 않습니다.\r\n");
      out.write("		        </p>\r\n");
      out.write("		        \r\n");
      out.write("		        <h2>제8조 (기타 법적 사항)</h2>\r\n");
      out.write("		        <p>\r\n");
      out.write("		            1. 본 약관에 관한 법적 사항은 대한민국 법령을 따릅니다.<br>\r\n");
      out.write("		            2. 본 약관과 관련하여 발생하는 모든 분쟁은 서울중앙지방법원을 제1심 법원으로 합니다.\r\n");
      out.write("		        </p>\r\n");
      out.write("		        <p>본 약관은 [시행일자]부터 시행됩니다.</p>\r\n");
      out.write("				<input type=\"checkbox\" name=\"terms_agreed\" id=\"terms_agreed\">회원가입약관의 내용에 동의합니다.\r\n");
      out.write("				<table>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>목적</th>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>항목</th>\r\n");
      out.write("						<th>보유기간</th>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>이용자 식별 및 본인여부 확인</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>아이디, 이름, 비밀번호</td>\r\n");
      out.write("						<td>회원 탈퇴 시까지</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<th>고객서비스 이용에 관한 통지,<br>\r\n");
      out.write("							CS대응을 위한 이용자 식별\r\n");
      out.write("						</th>\r\n");
      out.write("					</tr>\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>연락처(이메일, 휴대전화번호)</td>\r\n");
      out.write("						<td>회원 탈퇴 시까지</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				</table>\r\n");
      out.write("				<input type=\"checkbox\" name=\"privacy_agreed\" id=\"privacy_agreed\">개인정보처리방침안내의 내용에 동의합니다.\r\n");
      out.write("				<input type=\"checkbox\" id=\"all\">전체동의\r\n");
      out.write("				<input type=\"submit\" value=\"회원가입\">\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("		<script>\r\n");
      out.write("			document.addEventListener('DOMContentLoaded', function(){\r\n");
      out.write("				const form=document.getElementById('signupForm');\r\n");
      out.write("				const allCheckbox=document.getElementById('all');\r\n");
      out.write("				const termsCheckbox=document.getElementById('terms_agreed');\r\n");
      out.write("				const privacyCheckbox=document.getElementById('privacy_agreed');\r\n");
      out.write("				\r\n");
      out.write("				//\"전체동의\" 체크박스를 클릭하면 'terms_agreed'와 'privacy_agreed'체크박스를 동시에 체크하거나 해제.\r\n");
      out.write("				function toggleCheckboxes(isChecked){\r\n");
      out.write("					termsCheckbox.checked=isChecked;\r\n");
      out.write("					privacyCheckbox.checked=isChecked;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				//체크박스 상태를 확인하고 \"전체동의\" 체크박스 업데이트.\r\n");
      out.write("				function updateAllCheckbox(){\r\n");
      out.write("					if(termsCheckbox.checked&&privacyCheckbox.checked){\r\n");
      out.write("						allCheckbox.checked=true;\r\n");
      out.write("					}else{\r\n");
      out.write("						allCheckbox.checked=false;\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				//폼 제출시 체크박스 상태를 확인.\r\n");
      out.write("				function validateForm(event){\r\n");
      out.write("					let messages=[];\r\n");
      out.write("					if(!termsCheckbox.checked&&!privacyCheckbox.checked){\r\n");
      out.write("						messages.push('회원가입 약관과 개인정보처리방침안내에 동의해주세요.');\r\n");
      out.write("					}else if(!termsCheckbox.checked){\r\n");
      out.write("						messages.push('회원가입 약관에 동의해주세요');\r\n");
      out.write("					}else if(!privacyCheckbox.checked){\r\n");
      out.write("						messages.push('개인정보처리방침안내에 동의해주세요.');				\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("					if(messages.length>0){\r\n");
      out.write("						event.preventDefault();\r\n");
      out.write("						alert(messages.join('\\n'));\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				//폼 제출시 유효성 검사 수행.\r\n");
      out.write("				form.addEventListener('submit', validateForm);\r\n");
      out.write("				//\"전체동의\" 체크박스 상태 변경 시 두 체크박스의 상태를 동기화.\r\n");
      out.write("				allCheckbox.addEventListener('change', function(){\r\n");
      out.write("					toggleCheckboxes(this.checked);\r\n");
      out.write("				});\r\n");
      out.write("				//두개의 체크박스가 선택되었을때 \"전체동의\" 체크박스 활성화.\r\n");
      out.write("				termsCheckbox.addEventListener('change', updateAllCheckbox);\r\n");
      out.write("				privacyCheckbox.addEventListener('change', updateAllCheckbox);\r\n");
      out.write("			});\r\n");
      out.write("		</script>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
